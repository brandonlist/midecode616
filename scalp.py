import math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
from scipy import interpolate
from matplotlib.colorbar import ColorbarBase

CHANNEL_10_20 = (
    ('Fpz', (0.0, 4.0)),
    ('Fp1', (-4.0, 3.5)),
    ('AFp1', (-1.5, 3.5)),
    ('AFp2', (1.5, 3.5)),
    ('Fp2', (4.0, 3.5)),
    ('AF7', (-4.0, 3.0)),
    ('AF5', (-3.0, 3.0)),
    ('AF3', (-2.0, 3.0)),
    ('AFz', (0.0, 3.0)),
    ('AF4', (2.0, 3.0)),
    ('AF6', (3.0, 3.0)),
    ('AF8', (4.0, 3.0)),
    ('FAF5', (-2.5, 2.5)),
    ('FAF1', (-0.65, 2.5)),
    ('FAF2', (0.65, 2.5)),
    ('FAF6', (2.5, 2.5)),
    ('F9', (-5.0, 2.0)),
    ('F7', (-4.0, 2.0)),
    ('F5', (-3.0, 2.0)),
    ('F3', (-2.0, 2.0)),
    ('F1', (-1.0, 2.0)),
    ('Fz', (0.0, 2.0)),
    ('F2', (1.0, 2.0)),
    ('F4', (2.0, 2.0)),
    ('F6', (3.0, 2.0)),
    ('F8', (4.0, 2.0)),
    ('F10', (5.0, 2.0)),
    ('FFC9', (-4.5, 1.5)),
    ('FFC7', (-3.5, 1.5)),
    ('FFC5', (-2.5, 1.5)),
    ('FFC3', (-1.5, 1.5)),
    ('FFC1', (-0.5, 1.5)),
    ('FFC2', (0.5, 1.5)),
    ('FFC4', (1.5, 1.5)),
    ('FFC6', (2.5, 1.5)),
    ('FFC8', (3.5, 1.5)),
    ('FFC10', (4.5, 1.5)),
    ('FT9', (-5.0, 1.0)),
    ('FT7', (-4.0, 1.0)),
    ('FC5', (-3.0, 1.0)),
    ('FC3', (-2.0, 1.0)),
    ('FC1', (-1.0, 1.0)),
    ('FCz', (0.0, 1.0)),
    ('FC2', (1.0, 1.0)),
    ('FC4', (2.0, 1.0)),
    ('FC6', (3.0, 1.0)),
    ('FT8', (4.0, 1.0)),
    ('FT10', (5.0, 1.0)),
    ('CFC9', (-4.5, 0.5)),
    ('CFC7', (-3.5, 0.5)),
    ('CFC5', (-2.5, 0.5)),
    ('CFC3', (-1.5, 0.5)),
    ('CFC1', (-0.5, 0.5)),
    ('CFC2', (0.5, 0.5)),
    ('CFC4', (1.5, 0.5)),
    ('CFC6', (2.5, 0.5)),
    ('CFC8', (3.5, 0.5)),
    ('CFC10', (4.5, 0.5)),
    ('T9', (-5.0, 0.0)),
    ('T7', (-4.0, 0.0)),
    ('C5', (-3.0, 0.0)),
    ('C3', (-2.0, 0.0)),
    ('C1', (-1.0, 0.0)),
    ('Cz', (0.0, 0.0)),
    ('C2', (1.0, 0.0)),
    ('C4', (2.0, 0.0)),
    ('C6', (3.0, 0.0)),
    ('T8', (4.0, 0.0)),
    ('T10', (5.0, 0.0)),
    ('A1', (-5.0, -0.5)),
    ('CCP7', (-3.5, -0.5)),
    ('CCP5', (-2.5, -0.5)),
    ('CCP3', (-1.5, -0.5)),
    ('CCP1', (-0.5, -0.5)),
    ('CCP2', (0.5, -0.5)),
    ('CCP4', (1.5, -0.5)),
    ('CCP6', (2.5, -0.5)),
    ('CCP8', (3.5, -0.5)),
    ('A2', (5.0, -0.5)),
    ('TP9', (-5.0, -1.0)),
    ('TP7', (-4.0, -1.0)),
    ('CP5', (-3.0, -1.0)),
    ('CP3', (-2.0, -1.0)),
    ('CP1', (-1.0, -1.0)),
    ('CPz', (0.0, -1.0)),
    ('CP2', (1.0, -1.0)),
    ('CP4', (2.0, -1.0)),
    ('CP6', (3.0, -1.0)),
    ('TP8', (4.0, -1.0)),
    ('TP10', (5.0, -1.0)),
    ('PCP9', (-4.5, -1.5)),
    ('PCP7', (-3.5, -1.5)),
    ('PCP5', (-2.5, -1.5)),
    ('PCP3', (-1.5, -1.5)),
    ('PCP1', (-0.5, -1.5)),
    ('PCP2', (0.5, -1.5)),
    ('PCP4', (1.5, -1.5)),
    ('PCP6', (2.5, -1.5)),
    ('PCP8', (3.5, -1.5)),
    ('PCP10', (4.5, -1.5)),
    ('P9', (-5.0, -2.0)),
    ('P7', (-4.0, -2.0)),
    ('P5', (-3.0, -2.0)),
    ('P3', (-2.0, -2.0)),
    ('P1', (-1.0, -2.0)),
    ('Pz', (0.0, -2.0)),
    ('P2', (1.0, -2.0)),
    ('P4', (2.0, -2.0)),
    ('P6', (3.0, -2.0)),
    ('P8', (4.0, -2.0)),
    ('P10', (5.0, -2.0)),
    ('PPO7', (-4.5, -2.5)),
    ('PPO5', (-3.0, -2.5)),
    ('PPO3', (-2.0, -2.5)),
    ('PPO1', (-0.65, -2.5)),
    ('PPO2', (0.65, -2.5)),
    ('PPO4', (2.0, -2.5)),
    ('PPO6', (3.0, -2.5)),
    ('PPO8', (4.5, -2.5)),
    ('PO9', (-5.5, -2.6)),
    ('PO7', (-4.0, -3)),
    ('PO5', (-3.0, -3)),
    ('PO3', (-2.0, -3)),
    ('PO1', (-1.0, -3)),
    ('POz', (0.0, -3)),
    ('PO2', (1.0, -3)),
    ('PO4', (2.0, -3)),
    ('PO6', (3.0, -3)),
    ('PO8', (4.0, -3)),
    ('PO10', (5.5, -2.6)),
    ('OPO1', (-1.5, -3.5)),
    ('OPO2', (1.5, -3.5)),
    ('O9', (-6.5, -3.5)),
    ('O1', (-4.0, -3.5)),
    ('O2', (4.0, -3.5)),
    ('O10', (6.5, -3.5)),
    ('Oz', (0.0, -4.0)),
    ('OI1', (1.5, -4.5)),
    ('OI2', (-1.5, -4.5)),
    ('I1', (1.0, -5)),
    ('Iz', (0.0, -5)),
    ('I2', (-1, -5))
)



#channel position of BCIC4_2a
inter42a =  0.17615076283298814
BCIC4_2a_scalp_position={'EEG-Fz':(0.0*inter42a , 2*inter42a),
                         'EEG-0':(-2*inter42a , 1*inter42a),
                         'EEG-1':(-1*inter42a , 1*inter42a),
                         'EEG-2':(0.0*inter42a , 1*inter42a),
                         'EEG-3':(1*inter42a , 1*inter42a),
                         'EEG-4':(2*inter42a , 1*inter42a),
                         'EEG-5':(-3*inter42a , 0.0*inter42a),
                         'EEG-C3':(-2*inter42a , 0.0*inter42a),
                         'EEG-6':(-1*inter42a , 0.0*inter42a),
                         'EEG-Cz':(0.0*inter42a , 0.0*inter42a),
                         'EEG-7':(1*inter42a , 0.0*inter42a),
                         'EEG-C4':(2*inter42a , 0.0*inter42a),
                         'EEG-8':(3*inter42a , 0.0*inter42a),
                         'EEG-9':(-2*inter42a , -1*inter42a),
                         'EEG-10':(-1*inter42a , -1*inter42a),
                         'EEG-11':(0.0*inter42a , -1*inter42a),
                         'EEG-12':(1*inter42a , -1*inter42a),
                         'EEG-13':(2*inter42a , -1*inter42a),
                         'EEG-14':(-1*inter42a , -2*inter42a),
                         'EEG-Pz':(0.0*inter42a , -2*inter42a),
                         'EEG-15':(1*inter42a , -2*inter42a),
                         'EEG-16':(0.0*inter42a , -3*inter42a),}

#k['clab'][0][0][0,:][i][0]
# k['ypos'][0][0][i,0]
# k['xpos'][0][0][i,0]

BCIC4_1_scalp_position={'AF3': (-0.20109028464758363, 0.6865651771052461),
 'AF4': (0.20109028464758363, 0.6865651771052461),
 'F5': (-0.48547489245766257, 0.5254742370339627),
 'F3': (-0.32894736842105265, 0.4652018297279918),
 'F1': (-0.16535230938896844, 0.43208640720881303),
 'Fz': (0.0, 0.4215490013382115),
 'F2': (0.16535230938896844, 0.43208640720881303),
 'F4': (0.32894736842105265, 0.4652018297279918),
 'F6': (0.48547489245766257, 0.5254742370339627),
 'FC5': (-0.605915412132058, 0.2716570424217247),
 'FC3': (-0.39919578789655963, 0.23384347850759124),
 'FC1': (-0.1976593484504406, 0.21394493707763337),
 'FCz': (0.0, 0.20773756505037197),
 'FC2': (0.1976593484504406, 0.21394493707763337),
 'FC4': (0.39919578789655963, 0.23384347850759124),
 'FC6': (0.605915412132058, 0.2716570424217247),
 'CFC7': (-0.7483468341419532, 0.15177169088329834),
 'CFC5': (-0.5247297565962373, 0.1255310315311084),
 'CFC3': (-0.30963911235797154, 0.11086095908649396),
 'CFC1': (-0.10226302831631562, 0.1042664794829223),
 'CFC2': (0.10226302831631562, 0.1042664794829223),
 'CFC4': (0.30963911235797154, 0.11086095908649396),
 'CFC6': (0.5247297565962373, 0.1255310315311084),
 'CFC8': (0.7483468341419532, 0.15177169088329834),
 'T7': (-0.8771929824561404, 0.0),
 'C5': (-0.6456905834155688, 0.0),
 'C3': (-0.4215490013382115, 0.0),
 'C1': (-0.20773756505037197, 0.0),
 'Cz': (0.0, 0.0),
 'C2': (0.20773756505037197, 0.0),
 'C4': (0.4215490013382115, 0.0),
 'C6': (0.6456905834155688, 0.0),
 'T8': (0.8771929824561404, 0.0),
 'CCP7': (-0.7483468341419532, -0.15177169088329834),
 'CCP5': (-0.5247297565962373, -0.1255310315311084),
 'CCP3': (-0.30963911235797154, -0.11086095908649396),
 'CCP1': (-0.10226302831631562, -0.1042664794829223),
 'CCP2': (0.10226302831631562, -0.1042664794829223),
 'CCP4': (0.30963911235797154, -0.11086095908649396),
 'CCP6': (0.5247297565962373, -0.1255310315311084),
 'CCP8': (0.7483468341419532, -0.15177169088329834),
 'CP5': (-0.605915412132058, -0.2716570424217247),
 'CP3': (-0.39919578789655963, -0.23384347850759124),
 'CP1': (-0.1976593484504406, -0.21394493707763337),
 'CPz': (0.0, -0.20773756505037197),
 'CP2': (0.1976593484504406, -0.21394493707763337),
 'CP4': (0.39919578789655963, -0.23384347850759124),
 'CP6': (0.605915412132058, -0.2716570424217247),
 'P5': (-0.48547489245766257, -0.5254742370339627),
 'P3': (-0.32894736842105265, -0.4652018297279918),
 'P1': (-0.16535230938896844, -0.43208640720881303),
 'Pz': (0.0, -0.4215490013382115),
 'P2': (0.16535230938896844, -0.43208640720881303),
 'P4': (0.32894736842105265, -0.4652018297279918),
 'P6': (0.48547489245766257, -0.5254742370339627),
 'PO1': (-0.10395864942009443, -0.6558381161286909),
 'PO2': (0.10395864942009443, -0.6558381161286909),
 'O1': (-0.17113186141765643, -0.8603379652659916),
 'O2': (0.17113186141765643, -0.8603379652659916)}
# names = ['AF3',
#  'AF4',
#  'F5',
#  'F3',
#  'F1',
#  'Fz',
#  'F2',
#  'F4',
#  'F6',
#  'FC5',
#  'FC3',
#  'FC1',
#  'FCz',
#  'FC2',
#  'FC4',
#  'FC6',
#  'CFC7',
#  'CFC5',
#  'CFC3',
#  'CFC1',
#  'CFC2',
#  'CFC4',
#  'CFC6',
#  'CFC8',
#  'T7',
#  'C5',
#  'C3',
#  'C1',
#  'Cz',
#  'C2',
#  'C4',
#  'C6',
#  'T8',
#  'CCP7',
#  'CCP5',
#  'CCP3',
#  'CCP1',
#  'CCP2',
#  'CCP4',
#  'CCP6',
#  'CCP8',
#  'CP5',
#  'CP3',
#  'CP1',
#  'CPz',
#  'CP2',
#  'CP4',
#  'CP6',
#  'P5',
#  'P3',
#  'P1',
#  'Pz',
#  'P2',
#  'P4',
#  'P6',
#  'PO1',
#  'PO2',
#  'O1',
#  'O2']

BCIC3_4b_scalp_position={'Fp1': (-0.15006947847394486, 0.7544502156947926),
 'AFp1': (-0.07572907002841894, 0.6852702355678613),
 'Fpz': (0.0, 0.7692307692307692),
 'AFp2': (0.07572907002841894, 0.6852702355678613),
 'Fp2': (0.15006947847394486, 0.7544502156947926),
 'AF7': (-0.2943718710500691, 0.7106765634702206),
 'AF3': (-0.17850109968791833, 0.6094408754530025),
 'AF4': (0.17850109968791833, 0.6094408754530025),
 'AF8': (0.2943718710500691, 0.7106765634702206),
 'FAF5': (-0.29895291797929596, 0.5381010360372348),
 'FAF1': (-0.0817313662544627, 0.4844503534452925),
 'FAF2': (0.0817313662544627, 0.4844503534452925),
 'FAF6': (0.29895291797929596, 0.5381010360372348),
 'F7': (-0.5439282932204212, 0.5439282932204211),
 'F5': (-0.4309397757650841, 0.46644585208388023),
 'F3': (-0.296077061122885, 0.4187161953475518),
 'F1': (-0.15032628186397615, 0.39282150506207697),
 'Fz': (0.0, 0.3846153846153846),
 'F2': (0.15032628186397615, 0.39282150506207697),
 'F4': (0.296077061122885, 0.4187161953475518),
 'F6': (0.4309397757650841, 0.46644585208388023),
 'F8': (0.5439282932204212, 0.5439282932204211),
 'FFC7': (-0.5697813770900833, 0.38817440683786614),
 'FFC5': (-0.41631390776217586, 0.33455469174040403),
 'FFC3': (-0.25280412557991805, 0.30404493662713766),
 'FFC1': (-0.08471341645926107, 0.2901409697737846),
 'FFC2': (0.08471341645926107, 0.2901409697737846),
 'FFC4': (0.25280412557991805, 0.30404493662713766),
 'FFC6': (0.41631390776217586, 0.33455469174040403),
 'FFC8': (0.5697813770900833, 0.38817440683786614),
 'FT9': (-0.8633905653515869, 0.38709384633892435),
 'FT7': (-0.7106765634702206, 0.29437187105006907),
 'FC5': (-0.5404355220854532, 0.24229968838847968),
 'FC3': (-0.36291974845713176, 0.21259346659315567),
 'FC1': (-0.1821179016172887, 0.19712299624417082),
 'FCz': (0.0, 0.1923076923076923),
 'FC2': (0.1821179016172887, 0.19712299624417082),
 'FC4': (0.36291974845713176, 0.21259346659315567),
 'FC6': (0.5404355220854532, 0.24229968838847968),
 'FT8': (0.7106765634702206, 0.29437187105006907),
 'FT10': (0.8633905653515869, 0.38709384633892435),
 'CFC7': (-0.6614810928250369, 0.13415451147127352),
 'CFC5': (-0.47366439296954455, 0.11331467122184849),
 'CFC3': (-0.2845659923960465, 0.1018839596851515),
 'CFC1': (-0.09490864165361916, 0.09676801186759182),
 'CFC2': (0.09490864165361916, 0.09676801186759182),
 'CFC4': (0.2845659923960465, 0.1018839596851515),
 'CFC6': (0.47366439296954455, 0.11331467122184849),
 'CFC8': (0.6614810928250369, 0.13415451147127352),
 'T7': (-0.7692307692307692, 0.0),
 'C5': (-0.5769230769230769, 0.0),
 'C3': (-0.3846153846153846, 0.0),
 'C1': (-0.1923076923076923, 0.0),
 'Cz': (0.0, 0.0),
 'C2': (0.1923076923076923, 0.0),
 'C4': (0.3846153846153846, 0.0),
 'C6': (0.5769230769230769, 0.0),
 'T8': (0.7692307692307692, 0.0),
 'CCP7': (-0.6614810928250369, -0.13415451147127352),
 'CCP5': (-0.47366439296954455, -0.11331467122184849),
 'CCP3': (-0.2845659923960465, -0.1018839596851515),
 'CCP1': (-0.09490864165361916, -0.09676801186759182),
 'CCP2': (0.09490864165361916, -0.09676801186759182),
 'CCP4': (0.2845659923960465, -0.1018839596851515),
 'CCP6': (0.47366439296954455, -0.11331467122184849),
 'CCP8': (0.6614810928250369, -0.13415451147127352),
 'TP9': (-0.8633905653515869, -0.38709384633892435),
 'TP7': (-0.7106765634702206, -0.29437187105006907),
 'CP5': (-0.5404355220854532, -0.24229968838847968),
 'CP3': (-0.36291974845713176, -0.21259346659315567),
 'CP1': (-0.1821179016172887, -0.19712299624417082),
 'CPz': (0.0, -0.1923076923076923),
 'CP2': (0.1821179016172887, -0.19712299624417082),
 'CP4': (0.36291974845713176, -0.21259346659315567),
 'CP6': (0.5404355220854532, -0.24229968838847968),
 'TP8': (0.7106765634702206, -0.29437187105006907),
 'TP10': (0.8633905653515869, -0.38709384633892435),
 'PCP7': (-0.5697813770900833, -0.38817440683786614),
 'PCP5': (-0.41631390776217586, -0.33455469174040403),
 'PCP3': (-0.25280412557991805, -0.30404493662713766),
 'PCP1': (-0.08471341645926107, -0.2901409697737846),
 'PCP2': (0.08471341645926107, -0.2901409697737846),
 'PCP4': (0.25280412557991805, -0.30404493662713766),
 'PCP6': (0.41631390776217586, -0.33455469174040403),
 'PCP8': (0.5697813770900833, -0.38817440683786614),
 'P9': (-0.6130576773823729, -0.6635688483280512),
 'P7': (-0.5439282932204212, -0.5439282932204211),
 'P5': (-0.4309397757650841, -0.46644585208388023),
 'P3': (-0.296077061122885, -0.4187161953475518),
 'P1': (-0.15032628186397615, -0.39282150506207697),
 'Pz': (0.0, -0.3846153846153846),
 'P2': (0.15032628186397615, -0.39282150506207697),
 'P4': (0.296077061122885, -0.4187161953475518),
 'P6': (0.4309397757650841, -0.46644585208388023),
 'P8': (0.5439282932204212, -0.5439282932204211),
 'P10': (0.6130576773823729, -0.6635688483280512),
 'PPO7': (-0.4507843886633593, -0.6878636203796364),
 'PPO5': (-0.29895291797929596, -0.5381010360372348),
 'PPO1': (-0.0817313662544627, -0.4844503534452925),
 'PPO2': (0.0817313662544627, -0.4844503534452925),
 'PPO6': (0.29895291797929596, -0.5381010360372348),
 'PPO8': (0.4507843886633593, -0.6878636203796364),
 'PO7': (-0.2943718710500691, -0.7106765634702206),
 'PO3': (-0.17850109968791833, -0.6094408754530025),
 'PO1': (-0.09272407641349512, -0.5849631938662423),
 'POz': (0.0, -0.5769230769230769),
 'PO2': (0.09272407641349512, -0.5849631938662423),
 'PO4': (0.17850109968791833, -0.6094408754530025),
 'PO8': (0.2943718710500691, -0.7106765634702206),
 'OPO1': (-0.07572907002841894, -0.6852702355678613),
 'OPO2': (0.07572907002841894, -0.6852702355678613),
 'O1': (-0.15006947847394486, -0.7544502156947926),
 'Oz': (0.0, -0.7692307692307692),
 'O2': (0.15006947847394486, -0.7544502156947926),
 'OI1': (-0.0932572577886865, -0.8438823161209275),
 'OI2': (0.0932572577886865, -0.8438823161209275),
 'I1': (-0.1481344017643842, -0.934527213742598),
 'I2': (0.1481344017643842, -0.934527213742598)}
# names = ['Fp1',
#  'AFp1',
#  'Fpz',
#  'AFp2',
#  'Fp2',
#  'AF7',
#  'AF3',
#  'AF4',
#  'AF8',
#  'FAF5',
#  'FAF1',
#  'FAF2',
#  'FAF6',
#  'F7',
#  'F5',
#  'F3',
#  'F1',
#  'Fz',
#  'F2',
#  'F4',
#  'F6',
#  'F8',
#  'FFC7',
#  'FFC5',
#  'FFC3',
#  'FFC1',
#  'FFC2',
#  'FFC4',
#  'FFC6',
#  'FFC8',
#  'FT9',
#  'FT7',
#  'FC5',
#  'FC3',
#  'FC1',
#  'FCz',
#  'FC2',
#  'FC4',
#  'FC6',
#  'FT8',
#  'FT10',
#  'CFC7',
#  'CFC5',
#  'CFC3',
#  'CFC1',
#  'CFC2',
#  'CFC4',
#  'CFC6',
#  'CFC8',
#  'T7',
#  'C5',
#  'C3',
#  'C1',
#  'Cz',
#  'C2',
#  'C4',
#  'C6',
#  'T8',
#  'CCP7',
#  'CCP5',
#  'CCP3',
#  'CCP1',
#  'CCP2',
#  'CCP4',
#  'CCP6',
#  'CCP8',
#  'TP9',
#  'TP7',
#  'CP5',
#  'CP3',
#  'CP1',
#  'CPz',
#  'CP2',
#  'CP4',
#  'CP6',
#  'TP8',
#  'TP10',
#  'PCP7',
#  'PCP5',
#  'PCP3',
#  'PCP1',
#  'PCP2',
#  'PCP4',
#  'PCP6',
#  'PCP8',
#  'P9',
#  'P7',
#  'P5',
#  'P3',
#  'P1',
#  'Pz',
#  'P2',
#  'P4',
#  'P6',
#  'P8',
#  'P10',
#  'PPO7',
#  'PPO5',
#  'PPO1',
#  'PPO2',
#  'PPO6',
#  'PPO8',
#  'PO7',
#  'PO3',
#  'PO1',
#  'POz',
#  'PO2',
#  'PO4',
#  'PO8',
#  'OPO1',
#  'OPO2',
#  'O1',
#  'Oz',
#  'O2',
#  'OI1',
#  'OI2',
#  'I1',
#  'I2']

BCIC3_4a_scalp_position={'Fp1': (-0.15006947847394486, 0.7544502156947926),
 'AFp1': (-0.07572907002841894, 0.6852702355678613),
 'Fpz': (0.0, 0.7692307692307692),
 'AFp2': (0.07572907002841894, 0.6852702355678613),
 'Fp2': (0.15006947847394486, 0.7544502156947926),
 'AF7': (-0.2943718710500691, 0.7106765634702206),
 'AF3': (-0.17850109968791833, 0.6094408754530025),
 'AF4': (0.17850109968791833, 0.6094408754530025),
 'AF8': (0.2943718710500691, 0.7106765634702206),
 'FAF5': (-0.29895291797929596, 0.5381010360372348),
 'FAF1': (-0.0817313662544627, 0.4844503534452925),
 'FAF2': (0.0817313662544627, 0.4844503534452925),
 'FAF6': (0.29895291797929596, 0.5381010360372348),
 'F7': (-0.5439282932204212, 0.5439282932204211),
 'F5': (-0.4309397757650841, 0.46644585208388023),
 'F3': (-0.296077061122885, 0.4187161953475518),
 'F1': (-0.15032628186397615, 0.39282150506207697),
 'Fz': (0.0, 0.3846153846153846),
 'F2': (0.15032628186397615, 0.39282150506207697),
 'F4': (0.296077061122885, 0.4187161953475518),
 'F6': (0.4309397757650841, 0.46644585208388023),
 'F8': (0.5439282932204212, 0.5439282932204211),
 'FFC7': (-0.5697813770900833, 0.38817440683786614),
 'FFC5': (-0.41631390776217586, 0.33455469174040403),
 'FFC3': (-0.25280412557991805, 0.30404493662713766),
 'FFC1': (-0.08471341645926107, 0.2901409697737846),
 'FFC2': (0.08471341645926107, 0.2901409697737846),
 'FFC4': (0.25280412557991805, 0.30404493662713766),
 'FFC6': (0.41631390776217586, 0.33455469174040403),
 'FFC8': (0.5697813770900833, 0.38817440683786614),
 'FT9': (-0.8633905653515869, 0.38709384633892435),
 'FT7': (-0.7106765634702206, 0.29437187105006907),
 'FC5': (-0.5404355220854532, 0.24229968838847968),
 'FC3': (-0.36291974845713176, 0.21259346659315567),
 'FC1': (-0.1821179016172887, 0.19712299624417082),
 'FCz': (0.0, 0.1923076923076923),
 'FC2': (0.1821179016172887, 0.19712299624417082),
 'FC4': (0.36291974845713176, 0.21259346659315567),
 'FC6': (0.5404355220854532, 0.24229968838847968),
 'FT8': (0.7106765634702206, 0.29437187105006907),
 'FT10': (0.8633905653515869, 0.38709384633892435),
 'CFC7': (-0.6614810928250369, 0.13415451147127352),
 'CFC5': (-0.47366439296954455, 0.11331467122184849),
 'CFC3': (-0.2845659923960465, 0.1018839596851515),
 'CFC1': (-0.09490864165361916, 0.09676801186759182),
 'CFC2': (0.09490864165361916, 0.09676801186759182),
 'CFC4': (0.2845659923960465, 0.1018839596851515),
 'CFC6': (0.47366439296954455, 0.11331467122184849),
 'CFC8': (0.6614810928250369, 0.13415451147127352),
 'T7': (-0.7692307692307692, 0.0),
 'C5': (-0.5769230769230769, 0.0),
 'C3': (-0.3846153846153846, 0.0),
 'C1': (-0.1923076923076923, 0.0),
 'Cz': (0.0, 0.0),
 'C2': (0.1923076923076923, 0.0),
 'C4': (0.3846153846153846, 0.0),
 'C6': (0.5769230769230769, 0.0),
 'T8': (0.7692307692307692, 0.0),
 'CCP7': (-0.6614810928250369, -0.13415451147127352),
 'CCP5': (-0.47366439296954455, -0.11331467122184849),
 'CCP3': (-0.2845659923960465, -0.1018839596851515),
 'CCP1': (-0.09490864165361916, -0.09676801186759182),
 'CCP2': (0.09490864165361916, -0.09676801186759182),
 'CCP4': (0.2845659923960465, -0.1018839596851515),
 'CCP6': (0.47366439296954455, -0.11331467122184849),
 'CCP8': (0.6614810928250369, -0.13415451147127352),
 'TP9': (-0.8633905653515869, -0.38709384633892435),
 'TP7': (-0.7106765634702206, -0.29437187105006907),
 'CP5': (-0.5404355220854532, -0.24229968838847968),
 'CP3': (-0.36291974845713176, -0.21259346659315567),
 'CP1': (-0.1821179016172887, -0.19712299624417082),
 'CPz': (0.0, -0.1923076923076923),
 'CP2': (0.1821179016172887, -0.19712299624417082),
 'CP4': (0.36291974845713176, -0.21259346659315567),
 'CP6': (0.5404355220854532, -0.24229968838847968),
 'TP8': (0.7106765634702206, -0.29437187105006907),
 'TP10': (0.8633905653515869, -0.38709384633892435),
 'PCP7': (-0.5697813770900833, -0.38817440683786614),
 'PCP5': (-0.41631390776217586, -0.33455469174040403),
 'PCP3': (-0.25280412557991805, -0.30404493662713766),
 'PCP1': (-0.08471341645926107, -0.2901409697737846),
 'PCP2': (0.08471341645926107, -0.2901409697737846),
 'PCP4': (0.25280412557991805, -0.30404493662713766),
 'PCP6': (0.41631390776217586, -0.33455469174040403),
 'PCP8': (0.5697813770900833, -0.38817440683786614),
 'P9': (-0.6130576773823729, -0.6635688483280512),
 'P7': (-0.5439282932204212, -0.5439282932204211),
 'P5': (-0.4309397757650841, -0.46644585208388023),
 'P3': (-0.296077061122885, -0.4187161953475518),
 'P1': (-0.15032628186397615, -0.39282150506207697),
 'Pz': (0.0, -0.3846153846153846),
 'P2': (0.15032628186397615, -0.39282150506207697),
 'P4': (0.296077061122885, -0.4187161953475518),
 'P6': (0.4309397757650841, -0.46644585208388023),
 'P8': (0.5439282932204212, -0.5439282932204211),
 'P10': (0.6130576773823729, -0.6635688483280512),
 'PPO7': (-0.4507843886633593, -0.6878636203796364),
 'PPO5': (-0.29895291797929596, -0.5381010360372348),
 'PPO1': (-0.0817313662544627, -0.4844503534452925),
 'PPO2': (0.0817313662544627, -0.4844503534452925),
 'PPO6': (0.29895291797929596, -0.5381010360372348),
 'PPO8': (0.4507843886633593, -0.6878636203796364),
 'PO7': (-0.2943718710500691, -0.7106765634702206),
 'PO3': (-0.17850109968791833, -0.6094408754530025),
 'PO1': (-0.09272407641349512, -0.5849631938662423),
 'POz': (0.0, -0.5769230769230769),
 'PO2': (0.09272407641349512, -0.5849631938662423),
 'PO4': (0.17850109968791833, -0.6094408754530025),
 'PO8': (0.2943718710500691, -0.7106765634702206),
 'OPO1': (-0.07572907002841894, -0.6852702355678613),
 'OPO2': (0.07572907002841894, -0.6852702355678613),
 'O1': (-0.15006947847394486, -0.7544502156947926),
 'Oz': (0.0, -0.7692307692307692),
 'O2': (0.15006947847394486, -0.7544502156947926),
 'OI1': (-0.0932572577886865, -0.8438823161209275),
 'OI2': (0.0932572577886865, -0.8438823161209275),
 'I1': (-0.1481344017643842, -0.934527213742598),
 'I2': (0.1481344017643842, -0.934527213742598)}
# names = ['Fp1',
#  'AFp1',
#  'Fpz',
#  'AFp2',
#  'Fp2',
#  'AF7',
#  'AF3',
#  'AF4',
#  'AF8',
#  'FAF5',
#  'FAF1',
#  'FAF2',
#  'FAF6',
#  'F7',
#  'F5',
#  'F3',
#  'F1',
#  'Fz',
#  'F2',
#  'F4',
#  'F6',
#  'F8',
#  'FFC7',
#  'FFC5',
#  'FFC3',
#  'FFC1',
#  'FFC2',
#  'FFC4',
#  'FFC6',
#  'FFC8',
#  'FT9',
#  'FT7',
#  'FC5',
#  'FC3',
#  'FC1',
#  'FCz',
#  'FC2',
#  'FC4',
#  'FC6',
#  'FT8',
#  'FT10',
#  'CFC7',
#  'CFC5',
#  'CFC3',
#  'CFC1',
#  'CFC2',
#  'CFC4',
#  'CFC6',
#  'CFC8',
#  'T7',
#  'C5',
#  'C3',
#  'C1',
#  'Cz',
#  'C2',
#  'C4',
#  'C6',
#  'T8',
#  'CCP7',
#  'CCP5',
#  'CCP3',
#  'CCP1',
#  'CCP2',
#  'CCP4',
#  'CCP6',
#  'CCP8',
#  'TP9',
#  'TP7',
#  'CP5',
#  'CP3',
#  'CP1',
#  'CPz',
#  'CP2',
#  'CP4',
#  'CP6',
#  'TP8',
#  'TP10',
#  'PCP7',
#  'PCP5',
#  'PCP3',
#  'PCP1',
#  'PCP2',
#  'PCP4',
#  'PCP6',
#  'PCP8',
#  'P9',
#  'P7',
#  'P5',
#  'P3',
#  'P1',
#  'Pz',
#  'P2',
#  'P4',
#  'P6',
#  'P8',
#  'P10',
#  'PPO7',
#  'PPO5',
#  'PPO1',
#  'PPO2',
#  'PPO6',
#  'PPO8',
#  'PO7',
#  'PO3',
#  'PO1',
#  'POz',
#  'PO2',
#  'PO4',
#  'PO8',
#  'OPO1',
#  'OPO2',
#  'O1',
#  'Oz',
#  'O2',
#  'OI1',
#  'OI2',
#  'I1',
#  'I2']

inter33a =  0.5/3
BCIC3_3a_scalp_position ={'#  1': (0, 0.3333333333333333),
 '#  2': (-0.06666666666666667, 0.26666666666666666),
 '#  3': (0.0, 0.26666666666666666),
 '#  4': (0.06666666666666667, 0.26666666666666666),
 '#  5': (-0.13333333333333336, 0.2),
 '#  6': (-0.0666666666666667, 0.2),
 '#  7': (-2.7755575615628914e-17, 0.2),
 '#  8': (0.06666666666666664, 0.2),
 '#  9': (0.1333333333333333, 0.2),
 '# 10': (-0.2, 0.13333333333333336),
 '# 11': (-0.13333333333333336, 0.13333333333333336),
 '# 12': (-0.0666666666666667, 0.13333333333333336),
 '# 13': (-2.7755575615628914e-17, 0.13333333333333336),
 '# 14': (0.06666666666666664, 0.13333333333333336),
 '# 15': (0.1333333333333333, 0.13333333333333336),
 '# 16': (0.19999999999999996, 0.13333333333333336),
 '# 17': (-0.2666666666666667, 0.0666666666666667),
 '# 18': (-0.20000000000000007, 0.0666666666666667),
 '# 19': (-0.13333333333333341, 0.0666666666666667),
 '# 20': (-0.06666666666666675, 0.0666666666666667),
 '# 21': (-8.326672684688674e-17, 0.0666666666666667),
 '# 22': (0.06666666666666658, 0.0666666666666667),
 '# 23': (0.13333333333333325, 0.0666666666666667),
 '# 24': (0.1999999999999999, 0.0666666666666667),
 '# 25': (0.26666666666666655, 0.0666666666666667),
 '# 26': (-0.3333333333333334, 2.7755575615628914e-17),
 '# 27': (-0.2666666666666668, 2.7755575615628914e-17),
 '# 28': (-0.20000000000000012, 2.7755575615628914e-17),
 '# 29': (-0.13333333333333347, 2.7755575615628914e-17),
 '# 30': (-0.0666666666666668, 2.7755575615628914e-17),
 '# 31': (-1.3877787807814457e-16, 2.7755575615628914e-17),
 '# 32': (0.06666666666666653, 2.7755575615628914e-17),
 '# 33': (0.1333333333333332, 2.7755575615628914e-17),
 '# 34': (0.19999999999999984, 2.7755575615628914e-17),
 '# 35': (0.2666666666666665, 2.7755575615628914e-17),
 '# 36': (0.33333333333333315, 2.7755575615628914e-17),
 '# 37': (-0.26666666666666683, -0.06666666666666664),
 '# 38': (-0.20000000000000018, -0.06666666666666664),
 '# 39': (-0.13333333333333353, -0.06666666666666664),
 '# 40': (-0.06666666666666686, -0.06666666666666664),
 '# 41': (-1.942890293094024e-16, -0.06666666666666664),
 '# 42': (0.06666666666666647, -0.06666666666666664),
 '# 43': (0.13333333333333314, -0.06666666666666664),
 '# 44': (0.1999999999999998, -0.06666666666666664),
 '# 45': (0.26666666666666644, -0.06666666666666664),
 '# 46': (-0.20000000000000023, -0.1333333333333333),
 '# 47': (-0.13333333333333358, -0.1333333333333333),
 '# 48': (-0.06666666666666692, -0.1333333333333333),
 '# 49': (-2.498001805406602e-16, -0.1333333333333333),
 '# 50': (0.06666666666666642, -0.1333333333333333),
 '# 51': (0.13333333333333308, -0.1333333333333333),
 '# 52': (0.19999999999999973, -0.1333333333333333),
 '# 53': (-0.13333333333333358, -0.19999999999999996),
 '# 54': (-0.06666666666666692, -0.19999999999999996),
 '# 55': (-2.498001805406602e-16, -0.19999999999999996),
 '# 56': (0.06666666666666642, -0.19999999999999996),
 '# 57': (0.13333333333333308, -0.19999999999999996),
 '# 58': (-0.06666666666666693, -0.2666666666666666),
 '# 59': (-2.636779683484747e-16, -0.2666666666666666),
 '# 60': (0.0666666666666664, -0.2666666666666666)}
# names = ['#  1', '#  2', '#  3', '#  4', '#  5', '#  6', '#  7', '#  8', '#  9', '# 10', '# 11', '# 12', '# 13', '# 14',
#          '# 15', '# 16', '# 17', '# 18', '# 19', '# 20', '# 21', '# 22', '# 23', '# 24', '# 25', '# 26', '# 27', '# 28',
#          '# 29', '# 30', '# 31', '# 32', '# 33', '# 34', '# 35', '# 36', '# 37', '# 38', '# 39', '# 40', '# 41', '# 42',
#          '# 43', '# 44', '# 45', '# 46', '# 47', '# 48', '# 49', '# 50', '# 51', '# 52', '# 53', '# 54', '# 55', '# 56',
#          '# 57', '# 58', '# 59', '# 60']



def get_BCIC3_3a_pos(inter33a):
    names = ['#  1', '#  2', '#  3', '#  4', '#  5', '#  6', '#  7', '#  8', '#  9', '# 10', '# 11', '# 12', '# 13',
             '# 14',
             '# 15', '# 16', '# 17', '# 18', '# 19', '# 20', '# 21', '# 22', '# 23', '# 24', '# 25', '# 26', '# 27',
             '# 28',
             '# 29', '# 30', '# 31', '# 32', '# 33', '# 34', '# 35', '# 36', '# 37', '# 38', '# 39', '# 40', '# 41',
             '# 42',
             '# 43', '# 44', '# 45', '# 46', '# 47', '# 48', '# 49', '# 50', '# 51', '# 52', '# 53', '# 54', '# 55',
             '# 56',
             '# 57', '# 58', '# 59', '# 60']
    minus = [1,0,3,0,5,0,7,0,9,0,9,0,7,0,5,0,3,0]
    plus = [0,2,4,6,8,10,8,6,4,3]
    BCIC3_3a_scalp_position ={}
    count = 0
    xy = (0,5*inter33a)
    r_c = 0
    c_c = 0
    for k,m in enumerate(minus):
        if count==0:
            BCIC3_3a_scalp_position[names[count]] = xy
            xy = (xy[0]-inter33a*minus[0],xy[1]-inter33a)
            count+=1
            c_c += 1
            continue

        if count!=0:
            if r_c == plus[c_c]:
                BCIC3_3a_scalp_position[names[count]] = xy
                xy = (xy[0] - m * inter33a, xy[1] - inter33a)
                c_c += 1
                r_c = 0
                count +=1
            else:
                for j in range(plus[c_c]):
                    BCIC3_3a_scalp_position[names[count]] = xy
                    xy = (xy[0] + inter33a, xy[1])
                    count += 1
                    r_c += 1
    return BCIC3_3a_scalp_position





    {'#  1',
     '#  2', '#  3', '#  4',
     '#  5', '#  6', '#  7', '#  8', '#  9',
     '# 10', '# 11', '# 12', '# 13', '# 14', '# 15', '# 16',
     '# 17', '# 18', '# 19', '# 20', '# 21', '# 22', '# 23', '# 24', '# 25',
     '# 26', '# 27', '# 28', '# 29', '# 30', '# 31', '# 32', '# 33', '# 34', '# 35', '# 36',
     '# 37', '# 38', '# 39', '# 40', '# 41', '# 42', '# 43', '# 44', '# 45',
     '# 46', '# 47', '# 48', '# 49', '# 50', '# 51', '# 52',
     '# 53', '# 54', '# 55', '# 56', '# 57',
     '# 58', '# 59', '# 60'}
BCIC3_3a_scalp_position = get_BCIC3_3a_pos(inter33a)

def _transform_rect(rect, template):
    """Calculates the position of a relative notated rectangle within
    another rectangle.

    Parameters
    ----------
    rect : Rectangle
        The container rectangle to contain the other reactangle.
    template : Rectangle
        the rectangle to be contained in the other rectangle.
    """
    assert len(rect) == len(template) == 4, "Wrong inputs : [x, y, width, height]"
    x = rect[0] + (template[0] * rect[2])
    y = rect[1] + (template[1] * rect[3])
    w = rect[2] * template[2]
    h = rect[3] * template[3]
    return [x, y, w, h]


def ax_colorbar(vmin, vmax, ax=None, label=None, ticks=None, colormap=None):
    """Draw a color bar

    Draws a color bar on an existing axes. The range of the colors is
    defined by ``vmin`` and ``vmax``.

    .. note::

        Unlike the colorbar method from matplotlib, this method does not
        automatically create a new axis for the colorbar. It will paint
        in the currently active axis instead, overwriting any existing
        plots in that axis. Make sure to create a new axis for the
        colorbar.

    Parameters
    ----------
    vmin, vmax : float
        The minimum and maximum values for the colorbar.
    ax : Axes, optional
        The axes to draw the scalp plot on. If not provided, the
        currently activated axes (i.e. ``gca()``) will be taken
    label : string, optional
        The label for the colorbar
    ticks : list, optional
        The tick positions
    colormap : matplotlib.colors.colormap, optional
        A colormap to define the color transitions.

    Returns
    -------
    ax : Axes
        the axes on which the plot was drawn
    """
    if ax is None:
        ax = plt.gca()
    ColorbarBase(ax, norm=Normalize(vmin, vmax), label=label, ticks=ticks, cmap=colormap)


def plot_scalp(v, channels, dataset=None, levels=25, colormap=None, norm=None, ticks=None,
               annotate=True, position=None):
    """Plots the values 'v' for channels 'channels' on a scalp.

    Calculates the interpolation of the values v for the corresponding
    channels 'channels' and plots it as a contour plot on a scalp. The
    degree of gradients as well as the the appearance of the color bar
    can be adjusted.

    Parameters
    ----------
    v : [value]
        List containing the values of the channels.
    channels : [String]
        List containing the channel names.
    levels : int, optional
        The number of automatically created levels in the contour plot
        (default: 25).
    colormap : matplotlib.colors.colormap, optional
        A colormap to define the color transitions (default: a
        blue-white-red colormap).
    norm : matplotlib.colors.norm, optional
        A norm to define the min and max values (default: 'None', values
        from -10 to 10 are assumed).
    ticks : array([ints]), optional
        An array with values to define the ticks on the colorbar
        (default: 'None', 3 ticks at -10, 0 and 10 are displayed).
    annotate : Boolean, optional
        Flag to switch channel annotations on or off (default: True).
    position : [x, y, width, height], optional
        A Rectangle that limits the plot to its boundaries (default:
        None).

    Returns
    -------
    (Matplotlib.Axes, Matplotlib.Axes)
        Returns a pair of Matplotlib.Axes. The first contains the
        plotted scalp, the second the corresponding colorbar.

    Examples
    --------
    Plots the values v for channels 'channels' on a scalp

    >>> plot_scalp(v, channels)

    This plot has finer gradients through increasing the levels to 50.

    >>> plot_scalp(v, channels, levels=50)

    This plot has a norm and ticks from 0 to 10

    >>> n = matplotlib.colors.Normalize(vmin=0, vmax=10, clip=False)
    >>> t = np.linspace(0.0, 10.0, 3, endpoint=True)
    >>> plot_scalp(v, channels, norm=n, ticks=t)
    """
    rect_scalp = [.05, .05, .8, .9]
    rect_colorbar = [.9, .05, .05, .9]

    fig = plt.gcf()

    if position is None:
        pos_scalp = rect_scalp
        pos_colorbar = rect_colorbar
    else:
        pos_scalp = _transform_rect(position, rect_scalp)
        pos_colorbar = _transform_rect(position, rect_colorbar)

    if norm is None:
        vmax = np.abs(v).max()
        vmin = -vmax
        norm = Normalize(vmin, vmax, clip=False)
    if ticks is None:
        ticks = np.linspace(norm.vmin, norm.vmax, 3)

    a = fig.add_axes(pos_scalp)
    ax0 = ax_scalp(v,  channels, dataset=dataset, ax=a, annotate=None, vmin=norm.vmin, vmax=norm.vmax,
                   colormap=colormap)
    a = fig.add_axes(pos_colorbar)
    ax1 = ax_colorbar(norm.vmin, norm.vmax, ax=a, ticks=ticks, colormap=colormap,
                      label='')

    return ax0, ax1



def get_channelpos(channame,dataset=None):
    """Return the x/y position of a channel.

    This method calculates the stereographic projection of a channel
    from ``CHANNEL_10_20``, suitable for a scalp plot.

    Parameters
    ----------
    channame : str
        Name of the channel, the search is case insensitive.

    Returns
    -------
    x, y : float or None
        The projected point on the plane if the point is known,
        otherwise ``None``

    Examples
    --------

    >>> plot.get_channelpos('C2')
    (0.1720792096741632, 0.0)
    >>> # the channels are case insensitive
    >>> plot.get_channelpos('c2')
    (0.1720792096741632, 0.0)
    >>> # lookup for an invalid channel
    >>> plot.get_channelpos('foo')
    None

    """

    # print('load' + channame)
    if dataset==None:
        """
        load default 10-20 system
        """
        channame = channame.lower()
        for i in CHANNEL_10_20:
            if i[0].lower() == channame:
                # convert the 90/4th angular position into x, y, z
                p = i[1]
                ea, eb = p[0] * (90 / 4), p[1] * (90 / 4)
                ea = ea * math.pi / 180
                eb = eb * math.pi / 180
                x = math.sin(ea) * math.cos(eb)
                y = math.sin(eb)
                z = math.cos(ea) * math.cos(eb)
                # Calculate the stereographic projection.
                # Given a unit sphere with radius ``r = 1`` and center at
                # the origin. Project the point ``p = (x, y, z)`` from the
                # sphere's South pole (0, 0, -1) on a plane on the sphere's
                # North pole (0, 0, 1).
                #
                # The formula is:
                #
                # P' = P * (2r / (r + z))
                #
                # We changed the values to move the point of projection
                # further below the south pole
                mu = 1 / (1.3 + z)
                x *= mu
                y *= mu
                return x, y
        return None
    elif dataset =='BCIC42a':
        return BCIC4_2a_scalp_position[channame]
    elif dataset =='BCIC41':
        return BCIC4_1_scalp_position[channame]
    elif dataset =='BCIC34b':
        return BCIC3_4b_scalp_position[channame]
    elif dataset =='BCIC34a':
        return BCIC3_4a_scalp_position[channame]
    elif dataset =='BCIC33a':
        return BCIC3_3a_scalp_position[channame]


"BCIC42a BCIC41 BCIC34b BCIC34a BCIC33a"
def ax_scalp(v, channels, dataset=None, save_name=None,ax=None, annotate=False, vmin=None, vmax=None, colormap=None):
    """Draw a scalp plot.

    Draws a scalp plot on an existing axes. The method takes an array of
    values and an array of the corresponding channel names. It matches
    the channel names with an internal list of known channels and their
    positions to project them correctly on the scalp.

    .. warning:: The behaviour for unkown channels is undefined.

    Parameters
    ----------
    v : 1d-array of floats
        The values for the channels
    channels : 1d array of strings
        The corresponding channel names for the values in ``v``
    ax : Axes, optional
        The axes to draw the scalp plot on. If not provided, the
        currently activated axes (i.e. ``gca()``) will be taken
    annotate : Boolean, optional
        Draw the channel names next to the channel markers.
    vmin, vmax : float, optional
        The display limits for the values in ``v``. If the data in ``v``
        contains values between -3..3 and ``vmin`` and ``vmax`` are set
        to -1 and 1, all values smaller than -1 and bigger than 1 will
        appear the same as -1 and 1. If not set, the maximum absolute
        value in ``v`` is taken to calculate both values.
    colormap : matplotlib.colors.colormap, optional
        A colormap to define the color transitions.
    dataset : str
        have to be one of ['']
    Returns
    -------
    ax : Axes
        the axes on which the plot was drawn

    See Also
    --------
    ax_colorbar

    """
    if ax is None:
        ax = plt.gca()
    # what if we have an unknown channel?
    points = [get_channelpos(c,dataset) for c in channels]
    # calculate the interpolation
    x = [i[0] for i in points]
    y = [i[1] for i in points]
    z = v
    # interplolate the in-between values
    xx = np.linspace(min(x), max(x), 500)
    yy = np.linspace(min(y), max(y), 500)
    xx, yy = np.meshgrid(xx, yy)
    f = interpolate.LinearNDInterpolator(list(zip(x, y)), z)
    zz = f(xx, yy)
    # draw the contour map
    ctr = ax.contourf(xx, yy, zz, 20, vmin=vmin, vmax=vmax, cmap=colormap)
    ax.contour(xx, yy, zz, 5, colors="k", vmin=vmin, vmax=vmax, linewidths=.1)
    # paint the head
    ax.add_artist(plt.Circle((0, 0), 1, linestyle='solid', linewidth=2, fill=False))
    # add a nose
    ax.plot([-0.1, 0, 0.1], [1, 1.1, 1], 'k-')
    # add markers at channels positions
    ax.plot(x, y, 'k+')
    # set the axes limits, so the figure is centered on the scalp
    ax.set_ylim([-1.05, 1.15])
    ax.set_xlim([-1.15, 1.15])
    # hide the frame and axes
    # hiding the axes might be too much, as this will also hide the x/y
    # labels :/
    ax.set_frame_on(False)
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    # draw the channel names
    if annotate:
        for i in zip(channels, list(zip(x, y))):
            ax.annotate(" " + i[0], i[1])
    ax.set_aspect(1)
    plt.sci(ctr)
    if save_name!=None:
        plt.savefig(save_name)
    return ax

"""

names = ['EEG-Fz',
 'EEG-0',
 'EEG-1',
 'EEG-2',
 'EEG-3',
 'EEG-4',
 'EEG-5',
 'EEG-C3',
 'EEG-6',
 'EEG-Cz',
 'EEG-7',
 'EEG-C4',
 'EEG-8',
 'EEG-9',
 'EEG-10',
 'EEG-11',
 'EEG-12',
 'EEG-13',
 'EEG-14',
 'EEG-Pz',
 'EEG-15',
 'EEG-16']
values = np.random.random(size=(22))
ax_scalp(values,names,dataset='BCIC4_2a')
"""
